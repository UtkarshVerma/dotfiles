# Basic options
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set icons
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"
set drawbox
set ratios 2:3
set cleaner ~/.config/lf/cleaner
set previewer ~/.config/lf/previewer
set autoquit
set wrapscroll
set mouse
set cursorpreviewfmt ""

# Custom commands
cmd on-cd &{{
    # '&' commands run silently in background (which is what we want here),
    # but are not connected to stdout.
    # To make sure our escape sequence still reaches stdout we pipe it to /dev/tty
    printf "\033]0;$(pwd | sed "s|$HOME|~|") - lf\007" >/dev/tty
}}

cmd on-quit &{{
    printf "\033[23t" >/dev/tty   # Restore cached window title
}}

cmd open ${{
    case $(file --mime-type "$(readlink -f $f)" -b) in
    application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) localc $fx ;;
    image/vnd.djvu|application/pdf|application/octet-stream|application/postscript) setsid -f zathura $fx >/dev/null 2>&1 ;;
        text/*|application/json|inode/x-empty) $EDITOR $fx;;
    image/x-xcf) setsid -f gimp $f >/dev/null 2>&1 ;;
    image/svg+xml) display -- $f ;;
    image/*)
        sxiv . -F $f -ao 2>/dev/null | while read -r file; do
            [ -z "$file" ] && continue
            lf -remote "send select \"$file\""
            lf -remote "send toggle"
        done &
        ;;
    audio/*) mpv --audio-display=no $f ;;
    video/*|application/vnd.rn-realmedia) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
    application/pdf|application/vnd.djvu|application/epub*) setsid -f zathura $fx >/dev/null 2>&1 ;;
    application/pgp-encrypted) $EDITOR $fx ;;
    application/vnd.openxmlformats-officedocument.wordprocessingml.document|application/vnd.oasis.opendocument.text) setsid -f lowriter $fx >/dev/null 2>&1 ;;
    application/vnd.openxmlformats-officedocument.spreadsheetml.sheet|application/octet-stream|application/vnd.oasis.opendocument.spreadsheet|application/vnd.oasis.opendocument.spreadsheet-template) setsid -f localc $fx >/dev/null 2>&1 ;;
    application/vnd.openxmlformats-officedocument.presentationml.presentation|application/vnd.oasis.opendocument.presentation-template|application/vnd.oasis.opendocument.presentation|application/vnd.ms-powerpoint) setsid -f loimpress $fx >/dev/null 2>&1 ;;
    application/vnd.oasis.opendocument.graphics|application/vnd.oasis.opendocument.graphics-template) setsid -f lodraw $fx >/dev/null 2>&1 ;;
    application/vnd.oasis.opendocument.formula) setsid -f lomath $fx >/dev/null 2>&1 ;;
    application/vnd.oasis.opendocument.database) setsid -f lobase $fx >/dev/null 2>&1 ;;
        *) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
    esac
}}

cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"

cmd drag $dragon-drop --all --and-exit $fx

cmd extract ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    printf "%s\n\t" "$fx"
    printf "extract?[y/N]"
    read ans
    [ $ans = "y" ] && aunpack $fx
}}

# cmd moveto ${{
#   clear; tput cup $(($(tput lines)/3)); tput bold
#   set -f
#   clear; echo "Move to where?"
#   dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
#   for x in $fx; do
#       eval mv -iv \"$x\" \"$dest\"
#   done &&
#   notify-send "ðŸšš File(s) moved." "File(s) moved to $dest."
# }}

# cmd copyto ${{
#   clear; tput cup $(($(tput lines)/3)); tput bold
#   set -f
#   clear; echo "Copy to where?"
#   dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
#   for x in $fx; do
#       eval cp -ivr \"$x\" \"$dest\"
#   done &&
#   notify-send "ðŸ“‹ File(s) copied." "File(s) copies to $dest."
# }}

# cmd bulk_rename ${{
#     old="$(mktemp)"
#     new="$(mktemp)"
#     if [ -n "$fs" ]; then
#         fs="$(basename -a $fs)"
#     else
#         fs="$(ls)"
#     fi
#     printf '%s\n' "$fs" >"$old"
#     printf '%s\n' "$fs" >"$new"
#     $EDITOR "$new"
#     [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
#     paste "$old" "$new" | while IFS= read -r names; do
#         src="$(printf '%s' "$names" | cut -f1)"
#         dst="$(printf '%s' "$names" | cut -f2)"
#         if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
#             continue
#         fi
#         mv -- "$src" "$dst"
#     done
#     rm -- "$old" "$new"
#     lf -remote "send $id unselect"
# }}

cmd paste %{{
    mode=$(head -1 ~/.local/share/lf/files)
    list=$(sed 1d ~/.local/share/lf/files)

    if [ -z $list ]; then
        exit 1
    fi

    if [ $mode = "copy" ]; then
        cp -r $list .
    elif [ $mode = "move" ]; then
        mv $list .
    fi

    lf -remote "send load"
    lf -remote "send clear"
}}

on-cd

map <m-3> updir

map <c-f> $lf -remote "send $id select \"$(fzf)\""
map J $lf -remote "send $id cd $(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf)"
map zd drag

map R $vidir
map D delete
map E extract
map C copyto
map M moveto
map <c-n> push :mkdir<space>
map <c-r> reload
map . set hidden!
map <enter> shell
map x $$f
map X !$f
map o &mimeopen "$f"
map O $mimeopen --ask "$f"
